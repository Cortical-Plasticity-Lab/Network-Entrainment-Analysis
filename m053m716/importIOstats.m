function T = importIOstats(workbookFile, sheetName, dataLines, thresh)
%IMPORTIOSTATS Import IO Correlation data from spreadsheet
%  T = IMPORTIOSTATS(FILE) reads data from the first worksheet in the
%  Microsoft Excel spreadsheet file named FILE.  Returns the data as a
%  table.
%
%  T = IMPORTIOSTATS(FILE, SHEET) reads from the specified worksheet.
%
%  T = IMPORTIOSTATS(FILE, SHEET, DATALINES) reads from the specified
%  worksheet for the specified row interval(s). Specify DATALINES as a
%  positive scalar integer or a N-by-2 array of positive scalar integers
%  for dis-contiguous row intervals.
%
%  Example:
%  T = importIOstats("D:\MATLAB\Projects\Network-Entrainment-Analysis\m053m716\Exports\IO_stats_long.xls", "Sheet1", [2, 6917]);
%
%  See also: Contents, READTABLE.
%
% Auto-generated by MATLAB on 14-Dec-2020 11:19:30

%% Input handling
configure('nstims_in');
% If no sheet is specified, read first sheet
if nargin == 1 || isempty(sheetName)
   sheetName = 1;
end

% If row start and end points are not specified, define defaults
if nargin <= 2
   dataLines = [2, 6917];
end

%% Set up the Import Options and import the data
opts = spreadsheetImportOptions("NumVariables", 5);

% Specify sheet and range
opts.Sheet = sheetName;
opts.DataRange = "A" + dataLines(1, 1) + ":E" + dataLines(1, 2);

% Specify column names and types
opts.VariableNames = ["Mxc", "Day", "Name", "Stim", "nPulses"];
opts.VariableTypes = ["double", "double", "categorical", "categorical", "double"];

% Specify variable properties
opts = setvaropts(opts, ["Name", "Stim"], "EmptyFieldRule", "auto");

% Import the data
T = readtable(workbookFile, opts, "UseExcel", false);

for idx = 2:size(dataLines, 1)
   opts.DataRange = "A" + dataLines(idx, 1) + ":E" + dataLines(idx, 2);
   tb = readtable(workbookFile, opts, "UseExcel", false);
   T = [T; tb]; %#ok<AGROW>
end

T.Properties.VariableNames{'Name'} = 'Rat_ID';
[T.Day_Sigmoid,T.Day] = transformations.Day(T.Day);

[p,~,~] = fileparts(workbookFile);
S = readtable(fullfile(p,STIM_PULSE_FILE));
T.Rat_ID = string(T.Rat_ID);
S.Rat_ID = string(S.Rat_ID);
T = outerjoin(T,S,'Type','left',...
   'Keys',{'Rat_ID','Day'},...
   'LeftVariables',setdiff(T.Properties.VariableNames,'nPulses'),...
   'RightVariables',{'nPulses','Exclude'});
T.Rat_ID = categorical(T.Rat_ID);

T.logPulses = transformations.Stimulus_Count(T.nPulses);
T.logMxc = transformations.Mxc(T.Mxc);
T.Row_ID = (1:size(T,1)).';

T = movevars(T,{'Row_ID','Stim','Rat_ID','Day_Sigmoid'},'before','Day');
T = movevars(T,{'Mxc','logMxc'},'after','logPulses');

T.Properties.Description = "IO Correlation data for chronic statistical model testing differences in stimulation-evoked activity due to ADS, RS, or Control stimuli.";
T.Properties.VariableDescriptions{'Row_ID'} = 'Unique Row identifier for table operations';
T.Properties.VariableDescriptions{'Day'} = 'Relative Day after Implantation Surgery';
T.Properties.VariableDescriptions{'Rat_ID'} = 'Rat Identifier (RYY-#, where R denotes rat surgery; YY is last two digits of year, # is relative surgery within that year at cortical plasticity lab)';
T.Properties.VariableNames{'Stim'} = 'Treatment';
T.Properties.VariableDescriptions{'Treatment'} = 'Stimulation treatment group: activity-dependent stimulation (ADS), random-stimulation (RS), or control (C)';
T.Properties.VariableDescriptions{'nPulses'} = 'Total number of pulses within that stimulation epoch';
T.Properties.VariableUnits{'nPulses'} = 'icms pulses';
T.Properties.VariableDescriptions{'logPulses'} = 'Logarithmic transformation on number of pulses. For controls, value is estimate of matched-epoch value across all such epochs in RS or ADS observations.';
T.Properties.VariableUnits{'logPulses'} = 'log(icms pulses)';
T.Properties.VariableDescriptions{'Mxc'} = 'Maximum I/O Channel Correlation'; 
T.Properties.VariableDescriptions{'logMxc'} = 'log(Maximum I/O Channel Correlation)'; 
T.Properties.RowNames = strcat(string(T.Rat_ID),"::Day-",num2str(T.Day,'%02d'),"::ID-",num2str(T.Row_ID,'%04d'));

% Exclude any observations with MFR outside of fixed bounds
exc = (T.Mxc <= thresh(1)) | (T.Mxc > thresh(2)) | isnan(T.nPulses);
T.Exclude = T.Exclude | exc; 

T.Properties.UserData.MXC_THRESH = thresh;

end